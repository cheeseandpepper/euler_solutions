# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?


## WIP.  TOO SLOW

def build_triangle_numbers_until_divisor_count_reaches(number)
  start_time      = Time.now
  count           = 0
  triangle_number = 0
  range_max       = 2
  
  while count < number
    triangle_range  = (1..range_max)
    triangle_number =  triangle_range.inject(:+) 
    count           = factors_for(triangle_number).size
    range_max      += 1
    puts "I found #{count} factors for #{triangle_number}."
  end
  puts triangle_number
  end_time = Time.now
  puts "Completed in #{end_time - start_time} seconds"
end


def factors_for(number)
  #factor_start_time = Time.now
  range = (1..number/2)
  factors = range.select {|num| number % num == 0 }
  #factor_end_time = Time.now
  #puts "Generated factors for #{number} in #{factor_end_time - factor_start_time} seconds"
  puts factors << number
  factors << number
end

build_triangle_numbers_until_divisor_count_reaches(10)