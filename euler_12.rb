# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?


## Less slow, but still slow.
require 'pry'

def build_triangle_numbers_until_divisor_count_reaches(number)
  start_time      = Time.now
  count           = 0
  triangle_number = 0
  integer         = 2
  while count < number
    triangle_number = triangle_number_for(integer)
    count           = factors_for(triangle_number).size
    integer        += 1
  end
  puts triangle_number
  end_time = Time.now
  puts "Completed in #{end_time - start_time} seconds"
end


def triangle_number_for(number)
  number * (number + 1) / 2
end


def factors_for(number)
  factors = []
  n       = 1
  
  while n <= (number ** 0.5)
    if number % n == 0
      factors << n
      factors << (number / n) unless (number / n) == n
    end
    n += 1
  end
  factors
end

build_triangle_numbers_until_divisor_count_reaches(500)